name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
  NUGET_SOURCE: 'https://api.nuget.org/v3/index.json'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      
    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  package:
    needs: [build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Extract version from tag
      id: version
      if: startsWith(github.ref, 'refs/tags/v')
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Set version for main branch
      id: version-main
      if: github.ref == 'refs/heads/main'
      run: echo "VERSION=1.0.0-preview" >> $GITHUB_OUTPUT
      
    - name: Update package version
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        # Update version in project files
        find src -name "*.csproj" -exec sed -i "s/<Version>.*<\/Version>/<Version>${{ steps.version.outputs.VERSION }}<\/Version>/g" {} \;
        
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      
    - name: Pack NuGet packages
      run: dotnet pack --no-build --configuration Release --output ./artifacts
      
    - name: Validate NuGet packages
      run: |
        echo "Validating NuGet packages..."
        for package in ./artifacts/*.nupkg; do
          echo "Package: $package"
          dotnet nuget push "$package" --api-key ${{ env.NUGET_API_KEY }} --source ${{ env.NUGET_SOURCE }} --dry-run
        done
      
    - name: Publish to NuGet (Release)
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        echo "Publishing release packages to NuGet..."
        for package in ./artifacts/*.nupkg; do
          echo "Publishing: $package"
          dotnet nuget push "$package" --api-key ${{ env.NUGET_API_KEY }} --source ${{ env.NUGET_SOURCE }} --skip-duplicate
        done
      
    - name: Publish to NuGet (Preview)
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Publishing preview packages to NuGet..."
        for package in ./artifacts/*.nupkg; do
          echo "Publishing preview: $package"
          dotnet nuget push "$package" --api-key ${{ env.NUGET_API_KEY }} --source ${{ env.NUGET_SOURCE }} --skip-duplicate
        done
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages-${{ github.ref_name }}
        path: ./artifacts/*.nupkg
        retention-days: 30

