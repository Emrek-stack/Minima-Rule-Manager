name: Release

on:
  push:
    tags:
      - 'v*'

env:
  DOTNET_VERSION: '8.0.x'
  NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        body: |
          ## What's Changed
          
          ### üöÄ New Features
          - Complete RuleEngine implementation
          - SQLite persistence layer
          - ASP.NET Core MVC sample application
          - KnockoutJS rule builder UI
          
          ### üì¶ Packages
          - **RuleEngine.Core** - Core rule engine functionality
          - **RuleEngine.Sqlite** - SQLite persistence layer
          
          ### üõ†Ô∏è Technical Details
          - .NET 8.0 support
          - Roslyn-based C# compilation
          - Entity Framework Core integration
          - Comprehensive test coverage
          
          ### üìö Documentation
          - Complete README with examples
          - API documentation
          - Contributing guidelines
          
          ## Installation
          
          ```bash
          dotnet add package RuleEngine.Core
          dotnet add package RuleEngine.Sqlite
          ```
          
          ## Quick Start
          
          ```csharp
          using RuleEngine.Core.Rule;
          
          var compiler = new RuleCompiler<MyInput, bool>();
          var rule = await compiler.CompileAsync("my-rule", "Input.Value > 10");
          var result = rule.Invoke(new MyInput { Value = 15 });
          ```
          
          Full documentation: [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)
        draft: false
        prerelease: false

  build-and-package:
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      
    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal
      
    - name: Update package version
      run: |
        VERSION=${{ needs.create-release.outputs.version }}
        echo "Updating version to: $VERSION"
        find src -name "*.csproj" -exec sed -i "s/<Version>.*<\/Version>/<Version>$VERSION<\/Version>/g" {} \;
        
    - name: Pack NuGet packages
      run: dotnet pack --no-restore --configuration Release --output ./artifacts
      
    - name: Validate packages
      run: |
        echo "Validating NuGet packages..."
        for package in ./artifacts/*.nupkg; do
          echo "Validating: $package"
          dotnet nuget push "$package" --api-key ${{ env.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --dry-run
        done
      
    - name: Publish to NuGet
      run: |
        echo "Publishing packages to NuGet..."
        for package in ./artifacts/*.nupkg; do
          echo "Publishing: $package"
          dotnet nuget push "$package" --api-key ${{ env.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
        done
      
    - name: Upload packages to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./artifacts/
        asset_name: nuget-packages
        asset_content_type: application/zip

  notify:
    needs: [create-release, build-and-package]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify success
      if: needs.build-and-package.result == 'success'
      run: |
        echo "‚úÖ Release ${{ needs.create-release.outputs.version }} published successfully!"
        echo "üì¶ NuGet packages available at: https://www.nuget.org/packages/RuleEngine.Core/"
        echo "üì¶ NuGet packages available at: https://www.nuget.org/packages/RuleEngine.Sqlite/"
        
    - name: Notify failure
      if: needs.build-and-package.result == 'failure'
      run: |
        echo "‚ùå Release ${{ needs.create-release.outputs.version }} failed!"
        exit 1




