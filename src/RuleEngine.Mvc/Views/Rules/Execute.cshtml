@model RuleEngine.Mvc.ViewModels.ExecuteRuleViewModel

@{
    ViewData["Title"] = "Execute Rule";
}

<h1>Execute Rule: @Model.RuleName</h1>

<div class="row">
    <div class="col-md-6">
        <form asp-action="Execute">
            <input asp-for="RuleId" type="hidden" />
            <input asp-for="RuleName" type="hidden" />
            
            <div class="mb-3">
                <label asp-for="SampleInput" class="form-label"></label>
                <textarea asp-for="SampleInput" class="form-control" rows="8" id="jsonInput"></textarea>
                <span asp-validation-for="SampleInput" class="text-danger"></span>
                <div class="form-text">Enter JSON input data for testing the rule.</div>
            </div>
            
            <div class="mb-3">
                <button type="submit" class="btn btn-success">Execute Rule</button>
                <a asp-action="Index" class="btn btn-secondary">Back to Rules</a>
            </div>
        </form>
    </div>
    
    <div class="col-md-6">
        @if (Model.ExecutionResult != null)
        {
            <div class="card">
                <div class="card-header">
                    <h5>Execution Result</h5>
                </div>
                <div class="card-body">
                    @if (Model.ExecutionResult.Success)
                    {
                        <div class="alert alert-success">
                            <h6>✅ Execution Successful</h6>
                            <p><strong>Result:</strong> <code>@Model.ExecutionResult.Result</code></p>
                            <p><strong>Duration:</strong> @Model.ExecutionResult.Duration.TotalMilliseconds.ToString("F2") ms</p>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-danger">
                            <h6>❌ Execution Failed</h6>
                            <p><strong>Error:</strong> @Model.ExecutionResult.ErrorMessage</p>
                            <p><strong>Duration:</strong> @Model.ExecutionResult.Duration.TotalMilliseconds.ToString("F2") ms</p>
                        </div>
                    }
                </div>
            </div>
        }
        
        <div class="card mt-3">
            <div class="card-header">
                <h5>Sample Inputs</h5>
            </div>
            <div class="card-body">
                <div class="mb-2">
                    <button type="button" class="btn btn-sm btn-outline-primary" onclick="setSampleInput('amount')">Amount Test</button>
                    <button type="button" class="btn btn-sm btn-outline-primary" onclick="setSampleInput('vip')">VIP Test</button>
                    <button type="button" class="btn btn-sm btn-outline-primary" onclick="setSampleInput('complex')">Complex Test</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Initialize CodeMirror for JSON input
        var editor = CodeMirror.fromTextArea(document.getElementById("jsonInput"), {
            mode: "application/json",
            theme: "monokai",
            lineNumbers: true,
            autoCloseBrackets: true,
            matchBrackets: true,
            indentUnit: 2,
            tabSize: 2
        });
        
        function setSampleInput(type) {
            var samples = {
                'amount': '{\n  "Amount": 150,\n  "CustomerType": "Regular"\n}',
                'vip': '{\n  "Amount": 200,\n  "IsVip": true,\n  "CustomerType": "VIP"\n}',
                'complex': '{\n  "Amount": 500,\n  "IsVip": true,\n  "CustomerType": "Premium",\n  "Quantity": 5,\n  "Category": "Electronics"\n}'
            };
            
            editor.setValue(samples[type]);
        }
    </script>
}
